30.04

x=1
w=2
r=4



Spezial Bits

Special Bits - / SUID- / SGID- / Sticky- Bit
Special Bits:
        → werden über die „Ausführen“-Rechte im bestimmten Oktett gelegt.
        → wenn das „Ausführen“-Recht nicht gesetzt ist, wird darauf hingewiesen,
            ndem das Special Bit groß dargestellt wird.
            Berechtigung  ­rw­rw­rwspecial ­rwSrwSrwT
        → wird das „Ausführen“-Recht korrekt überlagert („Ausführen“ gesetzt),
            dann werden die special Bits ebenfalls klein dargestellt.

Berechtigung    drwxrwxrwx
special         drwsrwsrwt


Benutzeroktett – SUID Bit
        → Wird hauptsächlich auf ein Programm gesetzt.
        → Der entstehende Prozess bei Ausführung des Programms gehört dem
            Eigentümer des Programms auf welches das SUID Bit gesetzt wurde.
        → Zu Beachten : Kein nosuid-Argument bei eingehängten Dateisystemen
Beispiele:
        → Kein SUID gesetzt :
            Der Aufrufer des Programms ist Eigentümer des Prozesses.
­
                rwxr­xr­x  1 root root 6364 2009­05­19 09:08 programm*


Prozess, nach Aufruf von Benutzer tux

        aegis:/# ps aux | grep programm 
        tux      18766  1616   360 pts/3    S+   08:47   0:00 ./programm 


        → SUID gesetzt :
            Der Eigentümer des Programms ist auch Eigentümer des Prozesses.
­
                rwsr­xr­x  1 root root 6364 2009­05­19 09:08 programm*

Prozess, nach Aufruf von Benutzer tux

        aegis:/# ps aux | grep programm 
        root      18766  1616   360 pts/3    S+   08:47   0:00 ./programm 

        → SUID gesetzt (Beispiel 2) :
            Der Eigentümer des Programms ist auch Eigentümer des Prozesses.
­
                rwsr­xr­x  1 bill root 6364 2009­05­19 09:08 programm*

Prozess, nach Aufruf von Benutzer tux

        aegis:/# ps aux | grep programm 
        bill      18766  1616   360 pts/3    S+   08:47   0:00 ./programm 



Gruppenoktett – SGID Bit

        → sinnvoll nur auf Verzeichnisse
        → alle Daten (Verzeichnisse/Dateien) die nach dem Setzen des SGID Bits
            auf ein Verzeichnis, in dem Verzeichnis erzeugt werden
            Vorherige Daten bleiben unberührt.

Beispiel:
            aegis:/uebung# chmod 2755 sgidverz/
            aegis:/uebung# ls ­ld sgidverz/
            drwxr­sr­x 2 root ms 4096 2009­05­19 09:18 sgidverz/


Nach dem Erstellen von Daten in diesem Verzeichnis sieht es
dann folgendermassen aus:


            aegis:/uebung/sgidverz# touch datei 
            aegis:/uebung/sgidverz# mkdir verz 
            aegis:/uebung/sgidverz# ls ­l 
        insgesamt 4 
­           rw­r­­r­­ 1 root ms    0 2009­05­19 09:22 datei 
            drwxr­sr­x 2 root ms 4096 2009­05­19 09:22 verz/


Anderenoktett – Sticky Bit

        → sinnvoll nur auf Verzeichnisse
        → Das Recht zu löschen, gilt nur für den Eigentümer der Daten, bzw für
            den Systemverwalter root.
        → Beispiel /tmp
            Ausser dem eigenen Heimatverzeichnis der einzige Ort an dem ein normaler
            Benutzer noch schreiben darf.

            aegis:/$ ls ­ld /tmp/ 
            drwxrwxrwt 20 root root 4096 2009­05­19 09:08 /tmp/






            Erweiterte Berechtigungen mit ACLs (Access Control Lists)

        → Vorbereiten des Dateisystems für erweiterte Berechtigungen:

        acl-Eintrag in die /etc/fstab, für das verlangte Dateisystem.

                    /etc/fstab :
                    /dev/sda2 /home ext3 defaults,acl 0 0

        hiernach ist ein erneutes Einhängen des Dateisystems zwingend!
        z.B mit


                # mount ­o remount /home

        → Überprüfung mit mount
            mount liefert das eingehängte Dateisystem mit Option acl zurück.


                # mount | grep /dev/sda2 
                /dev/sda2 on /home type ext3 (rw,acl) 

        → Befehl zum Setzen von erweiterten Rechten


                setfacl [Option] Rechteoktett/Maske:[eindeutiger Name:][Rechte] Argument
Optionen:
    ­m // modifizieren/setzen eines Eintrags
    ­x // entfernen eines Eintrags
    ­b // entfernen aller ACEs (ACL­Einträge)

Rechteoktett
    u | user = Eigentümer
    g | group = besitzende Gruppe
    o | other = Andere
    a | all = alle

eindeutiger Name
    eindeutiger Name der Gruppe oder des Eigentümers.
    → Komplettes Entfernen von ACEs einer Datei oder eines Verzeichnisses

                setfacl ­b verzeichnis1/



Beispiel setzen von Rechten:


                setfacl ­m user:wendy:rwx verzeichnis1/

        → Nachdem ein ACE gesetzt wurde, wird dieses im System mit einem
        Plus (+) hinter den Berechtigungen angezeigt.


                drwxrwxr­x+ 2 root root 4096 2009­05­19 09:53 verzeichnis1/


        → Wichtig:
            Sollte ein Plus, erweiterte Berechtigungen anzeigen ist, wird das Gruppenoktett
            durch ein Maske maximal möglicher Berechtigungen ausgetauscht.
            Eine korrekte Analyse der Berechtigungen ist nur noch mit dem
            Betrachtungsbefehl getfacl möglich.


                        aegis:/# getfacl verzeichnis1/ 
                        # file: verzeichnis1 
                        # owner: root 
                        # group: root 
                        user::rwx 
                        user:wendy:rwx 
                        group::r­x 
                        mask::rwx 
                        other::r­x 


        → Weiterhin sollte darauf geachtet werden, dass das Gruppenoktett nun nicht
            mehr Gruppenrechte darstellt sondern die maximal möglichen durch die Maske
            gesetzten Rechte.


                        aegis:/# getfacl myscript 
                        # file: myscript
                        # owner: tux
                        # group: tux
                        user::rwx
                        user:wendy:r­x
                        group::r­x
                        mask::r­x
                        other::r­x


                        # setfacl ­m g:unix:rwx myscript

                        aegis:/# ls ­l myscript 
                        ­rwxrwxr­x+ 1 tux tux 0  2. Feb 11:22 myscript
                        aegis:/# getfacl myscript 
                        # file: myscript
                        # owner: tux
                        # group: tux
                        user::rwx
                        user:wendy:r­x
                        group::r­x
                        group:unix:rwx
                        mask::rwx
                        other::r­x

find . -type d -exec ls -ld {} ; | egrep "d.{9}+"                   #zeigt alle acls im . an
